0. Review
0.1. 함수와 메소드
어떠한 기능을 하는 코드들의 묶음
이름뒤에 소골호가 존재
단, 키워드(if, while, for등등)뒤의 소괄호는 메소드가 아님.

함수 : 클래스 밖에서 선언되어 있는 것.
메소드 : 클래스 안에서 선언되어 있는 것.

0.2. 메소드 정의
리턴타입 메소드명(자료형 매개변수, ...)//선언부
	{
	실행할 문장;//구현부
	return 리턴값;
	}

0.3. 메소드 호출
		매개변수	리턴값(반환값)	호출
	1	x	x		메소드명();
	2	o	x		메소드명(인수);
	3	x	o		변수=메소드명();syso(변수);
					syso(메소드명());
	4	o	o		변수 = 메소드명(인수); syso(변수);
					syso(메소드명(인수));
+) 메소드 호출 시 오류 해결방법
- 메소드를 정의하는 부분에서 static키워드를 붙인다
- 메소드가 정의된 클래스의 메인 메소드에서 해당 클래스의 객체(참조변수)를 만든다.

1. 메소드 (추가)
1.1. 인수와 매개변수
매개변수(Parameter) : 외부에서 전달받아 값을 저장하고 메소드 내에서 사용될 변수
인수(Argument) : 메소드를 사용할때 메소드의 매개변수로 전달 되는 값
- 메소드의 인수와 매개변수는 반드시 타입과 일치하거나 자동형변환이 가능한 타입이어야만한다.
- return되는 값은 반드시 return타입과 일치하거나 자동형변환이 가능한 타입이어야한다.
1.2. 메소드 오버로딩(Overloading)
오버로딩 : 매개변수의 개수, 타입, 순서가 다르면 같은 이름의 메소드로 선언할 수 있다.
이떄 반환타입은 오버로딩에 영향을 주지않는다.
(다형성 -> 같은 코드로 다른 기능을 하는 것)

메소드 오버로딩의 조건
- return타입은 같아도 상관없음
- 메소드 이름은 동일해야한다.
- 매개변수의 타입, 개수, 순서가 달라야함

메소드 오버로딩 시 주의할 점
- 매개변수의 타입, 개수, 순서가 똑같은 경우 매개변수의 이름이 다르다고해서 오버로딩이 아님.
- 리턴타입만 다르고 매개변수가 동일한 경우 오버로딩이 아니다.

메소드 오버로딩이 가능한 이유
-> 컴파일할때 메소드의 이름이 다르게 지정되기 때문
매개변수의 개수가 메소드를 호출시 전달한 인수값의 개수와 같은 메소드를 선택한다
매개변수의 타입이 메소드 호출시 전달한 인수값의 타입과 같은 메소드를 선택한다.
만약, 매개변수의 타입이 일치하는 메소드가 없을때는 전달받은 인수값보다 큰 타입이면 해당 메소드가 호출된다.

1.3. 메소드와 메모리
메소드는 실행되면 stack영역에 메소드 실행에 필요한 저장공간이 생성된다.
그곳에 메소드 내부에서 선언한 변수(매개변수, 지역변수)들의 저장공간이 생성된다.
메소드의 코드가 모두 실행되어 종료되면 stack영역에서 해당 메소드의 저장공간이 삭제된다.(메모리 해제)
지역변수의 저장공간이 사라지므로 지역변수는 사용이 불가능하다.

2. Class(클래스)
추상화된 클래스로 객체를 만들고 객체들간의 관계를 맺어 상호작용하는 프로그래밍 기법 -> 객체가 주인공이다
추상화 : 공통적인 특징을 파악하여 하나의 묶음으로 만들어내는것.

클래스 : 비슷한 특징을 가진 것들을 묶어 만든 일종의 설계도면
ex) 사람들을 위한 설계도면을 만들면 "사람 클래스"

클래스 내부에는 설계도면에 따라 만들어진 물건들을 위한 특징(필드)과 물건이 할 수 있는 행동(메소드)가 있다.-> 클래스 내부에는 필드, 메소드가 있다.

필드 : 그 물건의 특징을 나타내는 것
ex) 사람 클래스 내부에서 이름, 나이, 성별, 전화번호 등등...
메소드 : 물건이 할 수 있는 행동
ex) 사람 클래스 내부에서 걷기, 먹기, 말하기 등등...

클래스를 사용하는 방법 : 설계 도면에 따라 실제 물건(객체)을 만들어야한다.
클래스는 프로그램을 만들 때 다양한 물건을 만들고 물건들 간의 고나계를 효과적으로 관리할 수 있는 도구이다.

2.1. 사용자 정의 타입이다(자료형)
클래스를 사용하면 여러 타입, 여러 값을 저장할 수 있는 저장공간을 만들 수 있다.
클래스 안에 선언된 필드(변수)를 사용하고 싶다면 해당 클래스 타입으로 변수를 선언해야한다.
+) 배열의 한계 : 여러값을 저장할 수 있으나 하나의 타입만 저장 가능하다.

2.2. 연관성있는 저장공간과 기능을 한 곳에 모아 편하게 관리할 수 있는 것
저장공간과 기능을 나누어 관리하게 되면 코드가 길어졌을 때 사용하기 불편하다.
이떄 연관되는 저장공간과 기능을 클래스로 묶어서 관리할 수 있다.