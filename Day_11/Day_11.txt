0. Review
0.1. Class(클래스)
- 추상화된 클래스로 객체를 만들고 객체들 간의 관계를 맺어 상호작용하는 프로그래밍 기법
추상화 : 공통적인 특징을 파악하여 하나의 묶음으로 만들어 내는 것

1) 사용자 정의 타입이다(자료형)
- 클래스를 사용하면 여러 타입, 여러 값을 저장할 수 있는 저장공간을 만들 수 있다.
클래스 안에 선언된 변수를 사용하고 싶다면 해당 클래스 타입으로 변수(참조변수, 객체)를 선언해야한다.
2) 연관성있는 저장공간과 기능을 한 곳에 모아 편하게 관리할 수 있는 것.
저장공간과 기능을 나누어 관리하게 되면 코드가 길어졌을떄 사용하기 불편하다
이 때 연관되는 저장공간과 기능을 클래스로 묶어서 관리할 수 있다.

변수 : 하나의 자료형, 하나의 값
배열 : 하나의 자료형, 여러가지 값
클래스 : 여러가지 자료형, 여러가지 값

3) 객체를 생성하기 위한 틀, 설계도
공통되는 속성(변수, 필드)과 행위(메소드)를 한번만 선언해놓고 가져다 사용만 할 수 있도록 설계한다.
추상적인 것(클래스)을 구체화시키면(메모리에 생성된 것) 객체라고 한다.

객체(object)와 인스턴스(instance)
클래스 : 객체를 컴퓨터에 옮기기 위해 추상화한 것, 실제로 존재하는 공간이 아니며 추상적이다.
객체 : 실제 사물 또는 개념
인스턴스 : 클래스를 메모리에 할당시킨 것, 물리적으로 존재하는 공간이며 구체적이다.

생성자
- 클래스 이름 뒤에 소괄호가 있는 형태, 메소드와 비슷하지만 메소드라고 부르지 않음.
메소드 : 리턴타입 메소드명(매개변수){}
생성자 : 클래스명(매개변수){}

생성자는 리턴이라는 기능이 존재하지 않음.

기본생성자
public 클래스명(){}
매개변수가 없으며 클래스를 선언 시 자동으로 선언된다.
사용자가 직접 생성자를 선언하게 되면 자동으로 만들어주지 않는다.

this
객체 자기자신을 의미한다 -> 객체 자신의 주소값을 담고있다.
this는 자동으로 생성되는 변수이다.

this()
자기자신의 생성자를 의미한다.
생성자 내부에서만 사용이 가능하며 최상단에 작성해야한다.
생성자 내부에서 나의 다른 생성자를 호출할때 사용한다.

다형성 : 하나의 것으로 여러가지 값을 낼 수 있는 것
메소드의 오버로딩 : 같은 매개변수의 순서, 타입, 개수가 다르면 같은 메소드명으로 선언할 수 있다. 이때 리턴타입은 영향을 끼치지 않음.
생성자의 오버로딩 : 매개변수의 순서, 타입, 개수가 다르면 같은 이름의 생성자로 선언할 수 있다.객체를 만들때 초기값을 다양한 형태로 쉽게 만들기 위해서 사용한다.

static
프로그램을 실행 -> 실행되는데 필요한 클래스들의 정보를 읽어들인다.(JVM안의 클래스로더가 읽어들임)
static이 붙은 멤버는 클래스의 정보를 읽어오는 시점에 미리 만들어진다.
static이 붙은 저장공간 -> method영역

static(정적인)키워드
멤버 변수의 종류
static이 붙은 변수 : static변수, 클래스 변수, 정적변수
static이 붙지 않은 변수 : 인스턴스 변수

멤버 메소드의 종류
static이 붙은 메소드 : static 메소드, 클래스 메소드, 정적메소드
static이 붙지 않은 메소드 : 인스턴스 메소드