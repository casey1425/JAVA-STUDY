0. Review

0.1. Array(배열) : 하나의 타입으로 된 여러값으 저장공간

0.2. 배열의 사용목적
- 데이터의 집합을 효율적으로 관리하기 위한 목적
- 데이터의 순서를 보존하기 위한 목적
- 반복문을 사용하여 배열의 요소를 처리하기 위한 목적
- 메모리를 효율적으로 사용하기 위한 목적

0.3. 배열의 선언
- 배열 변수의 선언 : 배열을 사용하기 위해서는 먼저 배열 변수를 선언
	int[] array;
	int array[];
	array={값1, 값2,...};
- 배열의 생성과 초기화 : 배열을 생성할 떄 new연산자를 사용
	int[] array1=new int[5];
	int[] array2={값1, 값2,...};
- 다차원 배열의 선언과 생성 : 배열안에 또 다른 배열이 포함된 형태
※차원 수와 각 차원의 크기를 지정해야함.
	int[][]array3=new int[행][열];
	int[][]array4={{1,2,3},{4,5,6},{7,8,9}};
	//크기가 3*3인 2차원 int배열 생성

0.4. 배열의 구조
	int[]ar=new int[3];

0.5. for~each
코드의 가독성을 높이고 반복문에서 발생할 수 있는 일부 에러를 방지하는 장점을 가짐
for(변수타입 : 배열 또는 컬렉션){
	//반복실행할 코드
}

1. Method(메소드)
- 함수와 메소드
클래스 밖에 선언되어있다면 함수
클래스 내부에 선언되어있다면 메소드

메소드는 어떠한 기능이다. 이름뒤에 소괄호가 붙음

메소드의 선언과 정의
	리턴타입 메소드명(자료형 매개변수, ...)//선언부
	{
	실행할 문장;//구현부
	return 리턴값;
	}

1.1. Return Type : 반환할 값이 있다면 리턴값의 자료형을 작성한다.
반환할 값이 없다면 void를 작성한다.
1.2. Method name : 동사로 작성한다.
1.3. Parameter(매개변수) : 외부에서 전달받을 값이 있다면 자료형과 순서에 맞게 선언해준다. 자료형이 반드시 필요함. 생략이 가능함. 생략하게 되면 외부에서 값을 받을수가 없음.
1.4. 실행할 문장 : 메소드의 기능을 구현하는 코드를 작성한다.
1.5. Return : 생략이 가능하지만, 생략하게 되면 값이 아니다.
리턴값이 있다면 메소드를 사용한 부분을 모두 리턴값으로 본다.
return이 실행되면 메소드가 종료된다.

1.6. 메소드의 정의와 사용
1) 메소드를 정의할때는 중괄호가 있어야하고, 반드시 메소드 밖에서 정의해야한다.
2) 메소드를 사용할때는 중괄호가 없고, 반드시 메소드 안에서 사용해야한다.

1.7. 메소드의 정의 순서
1) 기능을 생각한다(ex. 숫자를 더해주는 기능)
2) 반환타입이 생각나지 않는다면 우선 void로 적성함
3) 기능에 맞는 메소드명을 작성한다(ex. add, sum, plus,...)
	void add(){}
4) 매개변수를 생각한다
	void add(int num1, int num2){}
5) 실행할 문장을 작성한다(기능을 구현할코드)
	void add(int num1, int num2){
		int result=num1+num2;
}
6) 리턴값을 생각한다.
void add(int num1, int num2){
		int result=num1+num2;
		return result;
}
7) 리턴값이 있다면 void가 아닌 return type의 값으로 변경해준다.
void는 리턴값이 없을때만 사용한다.
int add(int num1, int num2){
		int result=num1+num2;
		return result;
}

Plus)
return타입이 있을경우 하나의 값으로 본다.
메소드는 기능을 저장하는 것으로 볼 수 있다.(실제로 기능을 저장하지 않음)
-> 클래스 내부에서 기능을 구현하는것.

메소드의 호출(사용)
		매개변수	리턴값(반환값)	호출
	1	x	x		메소드명();
	2	o	x		메소드명(인수);
	3	x	o		변수=메소드명();syso(변수);
					syso(메소드명());
	4	o	o		변수 = 메소드명(인수); syso(변수);
					syso(메소드명(인수));
