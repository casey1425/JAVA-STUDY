0. Review
0.1. 접근제한자
접근제한자	적용대상				접근 가능 대상
public		클래스, 필드, 생성자, 메소드 	모든대상
protected	필드, 생성자, 메소드		같은 패키지, 자식 클래스
default		클래스, 필드, 생성자, 메소드	같은 패키지에 소속된 클래스
private		필드, 생성자, 메소드		클래스 내부
private은 다른곳에서 사용시 getter, setter메소드를 사용해야함.

제한자
final : 필드 → 상수
	클래스 → 상속이 불가능한 클래스
	메소드 → 오버라이딩이 불가능한 메소드
static : 프로그램이 실행되는 시점부터 끝날때까지 메모리에 올라간 상태

접근제한자 제한자 클래스명{}
접근제한자 제한자 메소드명(){}
접근제한자 제한자 필드명;

0.2. 오버로딩 vs 오버라이딩
오버로딩 : 매개변수의 개수, 타입, 순서가 다른 같은 이름의 메소드, 생성자를 선언할 수 있다. 반환타입은 영향을 끼지지 않는다.
오버라이딩 : 상속관계, 부모 클래스 메소드의 선언부는 동일하고 자식 클래스에서 재정의 할 수 있다. 오버라이딩은 한 번만 가능하다.

1. Casting (클래스 자료형의 형 변환)
→ 상속 관계에서만 가능
up Casting : 자식의 값을 부모 타입으로 형 변환하는 것.
down Casting : 이미 up Casting된 객체를 자식 타입으로 형 변환하는 것.
※부모의 값을 자식 타입으로 형 변환시 오류가 발생한다.
※자식 클래스 타입의 객체는 부모 클래스 타입도 동시의 가진다.

1.1. Up Casting
업캐스팅은 서브클래스(자식클래스)의 객체를 슈퍼클래스(부모클래스)의 객체로 변환하는 것을 의미한다.
업캐스팅은 자동적으로 수행된다.

1.2. Down Casting
다운캐스팅은 슈퍼클래스(부모클래스)의 객체를 서브클래스(자식클래스)의 객체로 변환하는 것을 의미한다.
→업캐스팅된 객체를 자식 클래스 타입으로 변환하는 것을 의미한다.
다운캐스팅은 명시적으로 강제형변환 연산자를 사용해야한다.

- 하나의 메소드에서 매개변수를 부모 타입으로 만들면 여러 자식 타입을 받아서 사용가능하다(참조변수의 다형성)

- 만약 부모 클래스에 존재하지 않는 멤버에 접근하기 위해서 down Casting을 해야한다.

Casting은 왜 사용할까?
- 부모타입인 하나의 저장공간에 여러 자식타입의 참조값을 up Casting하여 저장할 수 없다(참조변수의 다형성)
만약 하나의 기능을 하는 메소드를 만들 때 매개변수로 여러 자식타입을 받아야한다고 한다면 → Casting을 사용하지 않으면 자식 타입을 매개변수로 받는 메소드를 타입별로 각각 하나씩 만들어주어야한다.
그러나 Casting을 사용하면 부모 타입의 매개변수를 가진 하나의 메소드만 만들면 된다.
※주의 사항
1. up Casting으로 자식 참조값을 저장했다면 자식클래스에 재정의한 기능이 실행된다.
2. up Casting으로 자식 참조값을 저장했다면 자식 클래스에 새로 구현한 기능들은 사용할 수 없다. → 이 경우 down Casting을 통해 복구하고 사용한다.

다형성
- 하나의 것이 여러가지 형태를 가질 수 있는 성질
1. 오버로딩
2. 오버라이딩
3. 참조변수의 다형성(매개변수의 다형성)
부모 클래스 타입의 참조 변수로 자식 클래스 객체를 가리키는 것을 허용함

객체 간 타입 비교
- a instanceof A : 조건식, 참 또는 거짓 중 하나가 나오는 식
a가 A클래스의 타입이면 true, a가 A클래스의 타입이 아니라면 false가 출력됨.